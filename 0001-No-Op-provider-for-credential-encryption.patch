From 818ed9a10616b1b878bca8ac5dc6c0642dffaca3 Mon Sep 17 00:00:00 2001
From: Adam Young <ayoung@redhat.com>
Date: Fri, 2 Sep 2016 14:39:58 -0400
Subject: [PATCH] No Op provider for credential encryption

Enabling Encryption of credentials is based on
the Fernet Key Repository, which is not guaranteed to be
set up in all deployments, making this a non-backwards
compatible change. To provide time to migrate to Fernet, the
default for credentials needs to be unencrypted.

Change-Id: I7faf3127d1e54e05c5ef5c169f57d6267c7b92a7
Closes-Bug: 1619758
---
 doc/source/configuration.rst            | 20 ++++++++++-------
 keystone/conf/credential.py             |  7 +++---
 keystone/credential/providers/noop.py   | 38 +++++++++++++++++++++++++++++++++
 keystone/tests/unit/test_backend_sql.py |  4 ++++
 setup.cfg                               |  1 +
 5 files changed, 58 insertions(+), 12 deletions(-)
 create mode 100644 keystone/credential/providers/noop.py

diff --git a/doc/source/configuration.rst b/doc/source/configuration.rst
index 37a4270..eccde47 100644
--- a/doc/source/configuration.rst
+++ b/doc/source/configuration.rst
@@ -1818,11 +1818,15 @@ example:
 Credential Encryption
 =====================
 
-As of the Newton release, keystone encrypts all credentials stored in the
-default ``sql`` backend. Credentials are encrypted with the same mechanism used
-to encrypt Fernet tokens, ``fernet``. Keystone provides only one type of
-credential encryption but the encryption provider is pluggable in the event
-you wish to supply a custom implementation.
+As of the Newton release, keystone is capable of encrypting all
+credentials stored in the default ``sql`` backend. Credentials are
+encrypted with the same mechanism used to encrypt Fernet tokens,
+``fernet``.  By default, the credential provider uses a No-Operation
+(noop) provider, to avoid breaking existing deployments. 
+
+Keystone provides a fernet based provider. In addition, the encryption
+provider is pluggable in the event you wish to supply a custom
+implementation.
 
 This document details how credential encryption works, how to migrate existing
 credentials in a deployment, and how to manage encryption keys for credentials.
@@ -1839,9 +1843,9 @@ two configuration options needed:
     provider = fernet
     key_repository = /etc/keystone/credential-keys/
 
-``[credential] provider`` defaults to the only option supplied by keystone,
-``fernet``. There is no reason to change this option unless you wish to provide
-a custom credential encryption implementation. The ``[credential]
+``[credential] provider`` defaults to the ``noop`` provider. To transition to
+encrypting inside the credentials backend, you should switch
+to using the ``fernet`` provider instead. The ``[credential]
 key_repository`` location is a requirement of using ``fernet`` but will default
 to the ``/etc/keystone/credential-keys/`` directory. Both ``[credential]
 key_repository`` and ``[fernet_tokens] key_repository`` define locations for
diff --git a/keystone/conf/credential.py b/keystone/conf/credential.py
index b7877a8..c4915e0 100644
--- a/keystone/conf/credential.py
+++ b/keystone/conf/credential.py
@@ -26,12 +26,11 @@ change this unless you are providing a custom entry point.
 
 provider = cfg.StrOpt(
     'provider',
-    default='fernet',
+    default='noop',
     help=utils.fmt("""
 Entry point for credential encryption and decryption operations in the
-`keystone.credential.provider` namespace. Keystone only provides a `fernet`
-driver, so there's no reason to change this unless you are providing a custom
-entry point to encrypt and decrypt credentials.
+`keystone.credential.provider` namespace. Keystone provides `noop` and
+`fernet` drivers.
 """))
 
 key_repository = cfg.StrOpt(
diff --git a/keystone/credential/providers/noop.py b/keystone/credential/providers/noop.py
new file mode 100644
index 0000000..9d6038f
--- /dev/null
+++ b/keystone/credential/providers/noop.py
@@ -0,0 +1,38 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+
+from keystone.credential.providers import core
+
+
+class Provider(core.Provider):
+    """A No Operation Provider.
+
+    Provides the encrypt and decrypt function that pass through
+    the credentials unchanged.
+    """
+
+    def encrypt(self, credential):
+        """Attempt to encrypt a plaintext credential.
+
+        :param credential: a plaintext representation of a credential
+        :returns: the plain text credential
+        """
+        return (credential, "")
+
+    def decrypt(self, credential):
+        """Attempt to decrypt a credential.
+
+        :param credential: an credential string
+        :returns: the plain text credential
+        """
+        return credential
diff --git a/keystone/tests/unit/test_backend_sql.py b/keystone/tests/unit/test_backend_sql.py
index c4583f4..2cb4ede 100644
--- a/keystone/tests/unit/test_backend_sql.py
+++ b/keystone/tests/unit/test_backend_sql.py
@@ -1025,6 +1025,10 @@ class SqlCredential(SqlTests):
         for cred in expected_credentials:
             self.assertIn(cred['id'], retrived_ids)
 
+    def config_overrides(self):
+        super(SqlCredential, self).config_overrides()
+        self.config_fixture.config(group='credential', provider='fernet')
+
     def setUp(self):
         self.useFixture(database.Database())
         super(SqlCredential, self).setUp()
diff --git a/setup.cfg b/setup.cfg
index 2d060f2..cfacdd6 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -127,6 +127,7 @@ keystone.credential =
 
 keystone.credential.provider =
     fernet = keystone.credential.providers.fernet:Provider
+    noop = keystone.credential.providers.noop:Provider
 
 keystone.identity =
     ldap = keystone.identity.backends.ldap:Identity
-- 
2.5.5

